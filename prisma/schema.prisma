generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prediction {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  predictorId String
  fightId     String
  fighterId   String
  outcome     Boolean?
  fight       Fight    @relation(fields: [fightId], references: [id])
  fighter     Fighter  @relation(fields: [fighterId], references: [id])
  predictor   User     @relation(fields: [predictorId], references: [id])
}

model Fighter {
  id         String       @id @default(cuid())
  name       String
  imageUrl   String
  fightId    String
  fight      Fight        @relation(fields: [fightId], references: [id])
  predictors Prediction[]
}

model Fight {
  id          String       @id @default(cuid())
  draw        Boolean?
  loser       String?
  winner      String?
  started     Boolean?     @default(false)
  fighters    Fighter[]
  predictions Prediction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  predictions   Prediction[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
